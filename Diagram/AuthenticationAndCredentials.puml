@startuml Authentication and Credentials

interface URLSessionDelegate {
    urlSession(_ session: URLSession, didReceive challenge: URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)
}

interface URLSessionTaskDelegate {
    urlSession(_ session: URLSession, task: URLSessionTask, didReceive challenge: URLAuthenticationChallenge, completionHandler: (URLSession.AuthChallengeDisposition, URLCredential?) -> Void)
}

enum URLSession.AuthChallengeDisposition {
    useCredential
    performDefaultHandling
    cancelAuthenticationChallenge
    rejectProtectionSpace
}

class URLAuthenticationChallenge {
    protectionSpace: URLProtectionSpace
    proposedCredential: URLCredential?
    failureResponse: URLResponse?
    previousFailureCount: Int
    error: Error?

    init(authenticationChallenge challenge: URLAuthenticationChallenge, sender: URLAuthenticationChallengeSender)
    init(protectionSpace space: URLProtectionSpace, proposedCredential credential: URLCredential?, previousFailureCount: Int, failureResponse response: URLResponse?, error: Error?, sender: URLAuthenticationChallengeSender)
}

class URLCredential {
    user: String?
    hasPassword: Bool
    password: String?
    identity: SecIdentity?
    persistence: Persistence
    certificates: [Any]

    init(trust: SecTrust)
    init(identity: SecIdentity, certificates certArray: [Any]?, persistence: URLCredential.Persistence)
    init(user: String, password: String, persistence: URLCredential.Persistence)

}

enum Persistence {
    none
    forSession
    permanent
    synchronizable
}

class URLCredentialStorage {
    {static} shared: URLCredentialStorage
    {static} NSURLCredentialStorageChanged: NSNotification.Name
    allCredentials: [URLProtectionSpace : [String : URLCredential]]

    defaultCredential(for space: URLProtectionSpace) -> URLCredential?
    getDefaultCredential(for space: URLProtectionSpace, task: URLSessionTask, completionHandler: (URLCredential?) -> Void)
    setDefaultCredential(_ credential: URLCredential, for space: URLProtectionSpace)
    setDefaultCredential(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, task: URLSessionTask)
    remove(_ credential: URLCredential, for space: URLProtectionSpace)
    remove(_ credential: URLCredential, for space: URLProtectionSpace, options: [String : Any]? = nil)
    remove(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, options: [String : Any]? = nil, task: URLSessionTask)
    set(_ credential: URLCredential, for space: URLProtectionSpace)
    set(_ credential: URLCredential, for protectionSpace: URLProtectionSpace, task: URLSessionTask)
    credentials(for space: URLProtectionSpace) -> [String : URLCredential]?
    getCredentials(for protectionSpace: URLProtectionSpace, task: URLSessionTask, completionHandler: ([String : URLCredential]?) -> Void)
}

class URLProtectionSpace {
    authenticationMethod: String
    distinguishedNames: [Data]?
    host: String
    port: Int
    `protocol`: String?
    proxyType: String?
    realm: String?
    receivesCredentialSecurely: Bool
    serverTrust: SecTrust?

    init(host: String, port: Int, protocol: String?, realm: String?, authenticationMethod: String?)
    init(proxyHost host: String, port: Int, type: String?, realm: String?, authenticationMethod: String?)
    isProxy() -> Bool
}

package Foundation {
    Class "NSURLProtectionSpace Authentication Method Constants" {
        .. Session-Wide Authentication Challenges ..
        NSURLAuthenticationMethodClientCertificate: String
        NSURLAuthenticationMethodServerTrust: String
        NSURLAuthenticationMethodNegotiate: String
        NSURLAuthenticationMethodNTLM: String
        .. Task-Specific Authentication Challenges ..
        NSURLAuthenticationMethodDefault: String
        NSURLAuthenticationMethodHTTPBasic: String
        NSURLAuthenticationMethodHTTPDigest: String
        NSURLAuthenticationMethodHTMLForm: String
    }
}

class SecTrust {

}

class SecIdentity {

}

URLSessionDelegate ..> URLAuthenticationChallenge
URLSessionDelegate ..> URLSession.AuthChallengeDisposition
URLSessionDelegate ..> URLCredential
URLSessionTaskDelegate ..> URLAuthenticationChallenge
URLSessionTaskDelegate ..> URLSession.AuthChallengeDisposition
URLSessionTaskDelegate ..> URLCredential
URLAuthenticationChallenge --> URLProtectionSpace: Use
URLCredential --> Persistence: Use
URLCredential --> SecIdentity: Use
URLCredentialStorage --> URLCredential: Use
URLProtectionSpace --> SecTrust: Use
URLProtectionSpace --> Foundation: Use

@enduml